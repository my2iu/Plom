<html>
	<head>
		<title>Plom</title>
		<meta name="viewport" content="width=device-width, initial-scale=1"/>
		<link type="text/css" rel="stylesheet" href="style.css"/>
		<plom-ide-head-imports/>
		<plom-tutorial-code-panel-css/>
		<plom-tutorial-code-panel-js/>
	</head>
	<body>
		<h1>Plom</h1>
		<p><a href="ide/">Plom</a> is an in-development programming language that's designed specifically for programming on cellphones. It is currently still an evolving, experimental prototype. Development of Plom is done on <a href="https://github.com/my2iu/Plom">GitHub</a>. More documentation on the design of Plom can be found there as well.</p>
		
		<h3>How to type code in Plom</h3>
		
		<!-- 
		Should emphasize the themes or principles that
		
		1. If you aren't sure which button to press, you look for a button with text that matches the next few characters that you need to input
		2. Although the system is based on tokens and code structure, it tries to imitate the behaviour of a traditional text editor in that you can just press Backspace to delete the parts that you don't want or press Enter to start a new line
		3. There is no code formatting. Code formatting is cumbersome to do on small devices, doesn't adapt well as you change to differently sized devices, and isn't used in industry anyways (since they often use automatic linters to achieve consistent formatting). Plom will automatically format the code to make it look reasonable
		-->
		
		<p>Traditional text-based languages are too clunky for use with the cramped keyboards of mobile phones, so Plom has its own system for typing code. Although this system is unusual and does require some time to learn, it is a necessary trade-off. Programmers need a way to quickly type in their code for a programming language to be practical for real programming.</p>
        
        <p>To make entering code faster, Plom presents a special keyboard to the programmer. This keyboard has buttons for whole instructions and other program tokens. Notably, the keyboard has buttons for operators and other special symbols that are normally difficult to find on a mobile keyboard. Pressing a button will add these tokens to your program. The buttons shown on the keyboard will change depending on the context. Plom will only show you buttons for program tokens that can be validly added at the cursor position.</p>
		
        <p>Below are some examples that show how code can be typed into Plom. The examples may use simplified versions of the Plom keyboard to focus attention on certain features of the keyboard.</p>
        
        <h4>Example: Inputting Tokens</h4>
        
        <p>The basic "Hello World" program in Plom looks like this:</p>
        
        <plomcode>.print: <arg>"Hello World"</arg></plomcode>
        
        <p>At the end of this example section is a small Plom coding area where one can practice typing in the above code example. One would first need to press the <plombutton>.print:</plombutton> to type the first part of the code. After pressing the button, a <plomsnippet>.print</plomsnippet> will appear in the code, with a blank space beside it for what should be printed. The cursor will automatically move to that blank space.</p>

        <p>Strings in Plom start with <plomsnippet>"</plomsnippet> symbols. The only button that starts with a <plomsnippet>"</plomsnippet> is the <plombutton>"&#8230;"</plombutton> button. That is the button for typing strings. After ones presses that button, the Plom keyboard disappears, and one can type the text for the string using the normal keyboard. Pressing the <plombutton>&#10132;</plombutton> will finish inputting the string.</p>
        
		<plom-tip><b>Plom Principle</b><br/>
		Plom is designed so that the next button you need to press on the keyboard usually matches the next character(s) of the text you want to type.
		</plom-tip>
		
		<p>To recap, the steps needed to type in the code for Hello World are</p>
		<ol>
		<li>Press the <plombutton>.print:</plombutton> button</li>
		<li>Press the <plombutton>"&#8230;"</plombutton> button</li>
		<li>Type <plomsnippet>Hello World</plomsnippet> and press the <plombutton>&#10132;</plombutton> button</li>
		</ol>
		
        <plom-tutorial-code-panel lines="3" choicelines="3" cutpaste="false">
        	<suggestion token=".print:"/>
        	<token-filter exclude="all"/> 
        	<token-filter include="simple literals"/> 
        </plom-tutorial-code-panel>
        
		<h4>Example: Deleting tokens and expressions</h4>
		
		<p>When typing in math expressions, the Plom keyboard will automatically change depending on the context to show buttons that you may need. Below is the Plom code for printing the result of the expression "1 + 2":</p>

        <plomcode>.print: <arg>1 + 2</arg></plomcode>
		
		<p>At the end of this example section is a Plom coding area with some existing code. The string <plomsnippet>"Hello World"</plomsnippet> needs to be deleted from this existing code in order to type the new <plomsnippet>1 + 2</plomsnippet> expression. Although the Plom editor is based on tokens instead of characters, editing text in Plom is similar to text editing. To delete the <plomsnippet>"Hello World"</plomsnippet> string, one taps on the code immediately after the <plomsnippet>"Hello World"</plomsnippet> token to move the cursor there and then one presses the <plombutton>&#9003;</plombutton> button to delete that token.</p>

		<plom-tip><b>Plom Principle</b><br/>
		Although Plom has its own special input system based on tokens and code structure, it is designed to mimic a traditional text editor. You can modify text like a normal text editor by moving a cursor/caret, deleting text using Backspace, or adding lines using the Enter button.
		</plom-tip>

		<p>To type the expression <plomsnippet>1 + 2</plomsnippet>, one starts by typing the first number. One needs to press the <plombutton>123&#8230;</plombutton> button to enter a number, type <plomsnippet>1</plomsnippet> using the normal keyboard, and then press the <plombutton>&#10132;</plombutton> button to finish inputting the number. The Plom keyboard should reappear but with a different set of buttons. One has to press the <plombutton>+</plombutton> button to input a <plomsnippet>+</plomsnippet> token. Finally, to input the last number, one has to press the <plombutton>123&#8230;</plombutton> button, type <plomsnippet>2</plomsnippet> using the normal keyboard, and then press the <plombutton>&#10132;</plombutton> button to finish.</p>

		<p>To recap, the steps needed to edit the code are</p>
		<ol>
		<p><b>Delete the old expression</b></p>
		<li>Tap immediately after the <plomsnippet>"Hello World"</plomsnippet> token</li>
		<li>Press the <plombutton>&#9003;</plombutton> button</li>
		<p><b>Type the first number</b></p>
		<li>Press the <plombutton>123&#8230;</plombutton> button</li>
		<li>Type <plomsnippet>1</plomsnippet> and press the <plombutton>&#10132;</plombutton> button</li>
		<p><b>Type the <plomsnippet>+</plomsnippet></b></p>
		<li>Press the <plombutton>+</plombutton> button</li>
		<p><b>Type the second number</b></p>
		<li>Press the <plombutton>123&#8230;</plombutton> button</li>
		<li>Type <plomsnippet>2</plomsnippet> and press the <plombutton>&#10132;</plombutton> button</li>
		</ol>

        <plom-tutorial-code-panel lines="3" choicelines="3" cutpaste="false">
			<code>.{print: {"Hello World"}}</code>
        	<suggestion token=".print:"/>
        	<token-filter exclude="all"/> 
        	<token-filter include="simple literals"/> 
        	<token-filter include="math operators"/> 
        </plom-tutorial-code-panel>

		<h4>Example: Multiple lines and identifiers</h4>
		
		<p>A real program will have multiple lines of code. Below is a Plom program that asks the user to type their name. The program then says hello to the user:</p>

<plomcode>var .name @string := "User"
.name := .input: <arg>"What is your name?"</arg>
.print: <arg>"Hello, " + .name</arg></plomcode>
		
		<p>The details of the code are not important, but the first line creates a variable called <plomsnippet>.name</plomsnippet>, the second line asks the user to type their name and stores it in the variable, and the last line prints out a hello message using the name. At the end of this example section is a Plom coding area with the first and last line of code already entered. The rest of this example focuses on how to type the second line into Plom.</p>
		
		<p>To start a new line, one should first move the cursor to the end of the first line. One can just tap at the end of the first line to move the cursor there. Alternately, one can also drag the circle handle underneath the cursor to move the cursor. Then, one can add a newline by pressing the <plombutton>&#8629;</plombutton> button.</p>

		<p>To type the second line, one needs to input the name of a variable. In Plom, all variable names, function names, method names, and other identifiers begin with a period. To type the variable <plomsnippet>.name</plomsnippet>, one first needs to press the <plombutton>.</plombutton> button. Plom will then allow one to type the name of the variable, but Plom should show a suggesetion for <plomsnippet>name</plomsnippet> to the right of the code. Just tap on the suggestion <plombutton>name</plombutton>. Next, press the <plombutton>:=</plombutton> button to input the assignment operator. Then, one needs to type the <plomsnippet>.input:</plomsnippet> function. Unlike with <plomsnippet>.print:</plomsnippet>, there is button for that. Instead, press the <plombutton>.</plombutton> to input the function name. One can try to find the suggestion for <plomsnippet>.input:</plomsnippet> to the right of the code and choosing that suggestion. Alternately, one can simply type <plomsnippet>input:</plomsnippet> using the normal keyboard and then press the <plombutton>&#10132;</plombutton> button. Finally, one can type the argument to the <plomsnippet>.input:</plomsnippet> function by pressing the <plombutton>"&#8230;"</plombutton> button to create a string, typing <plomsnippet>What is your name?</plomsnippet> using the normal keyboard, and then pressing the <plombutton>&#10132;</plombutton> button.</p>

		<p>To recap, the steps needed to add the new line of code are</p>
		<ol>
		<p><b>Create a new line</b></p>
		<li>Tap at the end of the first line</li>
		<li><plombutton>&#8629;</plombutton> button.</li>
		<p><b>Type the new line</b></p>
		<li>Press the <plombutton>.</plombutton> button</li>
		<li>Choose the <plomsnippet>name</plomsnippet> suggestion shown to the right of the code</li>
		<li>Press the <plombutton>:=</plombutton> button</li>
		<li>Press the <plombutton>.</plombutton> button</li>
		<li>Find the <plomsnippet>input:</plomsnippet> suggestion and choose it; alternately, type <plomsnippet>input:</plomsnippet> and press the <plombutton>&#10132;</plombutton> button</li>
		<li>Press the <plombutton>"&#8230;"</plombutton> button</li>
		<li>Type <plomsnippet>What is your name?</plomsnippet> and press the <plombutton>&#10132;</plombutton> button</li>
		</ol>
		
        <plom-tutorial-code-panel lines="5" choicelines="3" cutpaste="false">
			<code>var .{name} @{string} := "User"
			.{print: {"Hello, " + .{name}}}</code>
        	<suggestion token=".print:"/>
        	<token-filter exclude="all"/> 
        	<token-filter include="simple literals"/> 
        	<token-filter include="math operators"/> 
        	<token-filter include="variable identifiers"/> 
        	<token-filter include="assign"/> 
        </plom-tutorial-code-panel>

		<h4>Example: Control flow blocks</h4>

		<p>Below is some code with a simple <plomsnippet>while</plomsnippet> loop that repeatedly prints "You are great."</p>

<plomcode>while true {
  .print: <arg>"You are great"</arg>
}</plomcode>

		<p>Plom has special handling for these blocks of code inside control flow statements. Plom understands the structure of these blocks, and it will automatically handle all the code formatting to ensure everything is properly indented. At the end of this example section is a small Plom coding area where one can practice typing in the above code example.
		</p>

		<plom-tip><b>Plom Principle</b><br/>
		Because code must be formatted differently to fit on different devices and because formatting code on a mobile phone is cumbersome, Plom automatically formats program code instead of letting programmers control it. This is consistent with industry practices where code formatting is managed by computer in order to ensure consistent formatting.
		</plom-tip>

		<p>To enter the above code into Plom, one first needs to press the <plombutton>while</plombutton> button to create a <plomsnippet>while</plomsnippet> loop. Plom will automatically add the necessary parentheses and indentation for the code. Then, one should press the <plombutton>true</plombutton> button.</p>
		
		<p>Next, one needs to move the cursor between the <plomsnippet>{</plomsnippet> and <plomsnippet>}</plomsnippet> to type code there. Although one can simply tap on the screen or drag the cursor, Plom has a special button that will automatically move the cursor to the next available entry location in the code. One can press that <plombutton>&#10144;</plombutton> button to move the cursor there. When there, one can press the <plombutton>.print:</plombutton> button to call the <plomsnippet>print:</plomsnippet>. And then one presses the <plombutton>"&#8230;"</plombutton> button to create a string. Finally, one can type <plomsnippet>You are great</plomsnippet> using the normal keyboard and the press the <plombutton>&#10132;</plombutton> button to finish.
		</p>

		<p>To recap, the steps needed to edit the code are</p>
		<ol>
		<li>Press the <plombutton>while</plombutton> button</li>
		<li>Press the <plombutton>true</plombutton> button</li>
		<li>Press the <plombutton>&#10144;</plombutton> button</li>
		<li>Press the <plombutton>print:</plombutton> button</li>
		<li>Press the <plombutton>"&#8230;"</plombutton> button </li>
		<li>Type <plomsnippet>You are great</plomsnippet> and press the <plombutton>&#10132;</plombutton> button</li>
		</ol>
		
        <plom-tutorial-code-panel lines="5" choicelines="3" cutpaste="false">
        	<suggestion token=".print:"/>
        	<token-filter exclude="all"/> 
        	<token-filter include="simple literals"/> 
        	<token-filter include="math operators"/> 
        	<token-filter include="variable identifiers"/> 
        	<token-filter include="assign"/> 
        	<token-filter include="control flow"/> 
        	<token-filter include="boolean literals"/> 
        </plom-tutorial-code-panel>
		
		
		<h2>PlomGit</h2>
		<p>In the course of developing Plom, we found the need for a basic mobile git client to version control our Plom code. Although there are other mobile git clients, we wanted a free one that worked with certain APIs, so we made the <a href="plomgit/">PlomGit</a> git client.</p>
		
	</body>
</html>