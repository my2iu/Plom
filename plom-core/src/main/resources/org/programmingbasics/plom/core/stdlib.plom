 module .{program} {
 stdlib { -1 }
 var . { var } @ {object }
 vardecls {
 var . {test global var } @ {object }
 }
 function . {input: . { prompt } @ {string } } @ {string } {
 // Displays a prompt asking for input and returns the value entered by the user
 primitive
 }
 function . {print string: . { value } @ {string } } @ {void } {
 // Prints a string to the screen
 primitive
 }
 function . {print: . { value } @ {object } } @ {void } {
 // Prints a value to the screen
 . {print string: { . {value } . {to string } } }
 }
 function . {range from: . { from } @ {number }to: . { to } @ {number } } @ {number iterator } {
 return @ {number range iterator } . {from: { . {from } }to: { . {to } } }
 }
 function . {test: . { arg1 } @ {number } } @ {number } {
 }
 class @ { JS object } extends @ {object } {
 function . {as boolean } @ {boolean } {
 primitive
 }
 function . {as number } @ {number } {
 primitive
 }
 function . {as string } @ {string } {
 primitive
 }
 function . {at: . { index } @ {number } } @ {JS object } {
 primitive
 }
 function . {at: . { index } @ {number }set: . { value } @ {object } } @ {void } {
 primitive
 }
 function . {call: . { method } @ {string } } @ {JS object } {
 primitive
 }
 function . {call: . { method } @ {string }with: . { param1 } @ {JS object } } @ {JS object } {
 primitive
 }
 function . {call: . { method } @ {string }with: . { param1 } @ {JS object }and: . { param2 } @ {JS object } } @ {JS object } {
 primitive
 }
 function . {call: . { method } @ {string }with: . { param1 } @ {JS object }and: . { param2 } @ {JS object }and: . { param3 } @ {JS object } } @ {JS object } {
 primitive
 }
 function . {get: . { key } @ {string } } @ {JS object } {
 primitive
 }
 function . {new: . { method } @ {string } } @ {JS object } {
 primitive
 }
 function . {new: . { method } @ {string }with: . { param1 } @ {JS object } } @ {JS object } {
 primitive
 }
 function . {new: . { method } @ {string }with: . { param1 } @ {JS object }and: . { param2 } @ {JS object } } @ {JS object } {
 primitive
 }
 function . {new: . { method } @ {string }with: . { param1 } @ {JS object }and: . { param2 } @ {JS object }and: . { param3 } @ {JS object } } @ {JS object } {
 primitive
 }
 function . {set: . { key } @ {string }to: . { value } @ {object } } @ {void } {
 primitive
 }
 classfunction . {from boolean: . { value } @ {boolean } } @ {JS object } {
 primitive
 }
 classfunction . {from number: . { value } @ {number } } @ {JS object } {
 primitive
 }
 classfunction . {from string: . { value } @ {string } } @ {JS object } {
 primitive
 }
 classfunction . {globals } @ {JS object } {
 primitive
 }
 }
 class @ { Test } extends @ {object } {
 constructor . {new } {
 }
 }
 class @ { boolean } extends @ {object } {
 function . {=: . { val } @ {object } } @ {boolean } {
 primitive
 }
 function . {not } @ {boolean } {
 primitive
 }
 function . {to string } @ {string } {
 if { this = true } {
 return"true"
 }
 else {
 return"false"
 }

 }
 }
 class @ { null } extends @ {object } {
 function . {= } @ {boolean } {
 primitive
 }
 }
 class @ { number } extends @ {object } {
 function . {*: . { val } @ {number } } @ {number } {
 primitive
 }
 function . {+: . { val } @ {number } } @ {number } {
 primitive
 }
 function . {-: . { val } @ {number } } @ {number } {
 primitive
 }
 function . {/: . { val } @ {number } } @ {number } {
 primitive
 }
 }
 class @ { number iterator } extends @ {object } {
 function . {at end } @ {boolean } {
 return true
 }
 function . {next } @ {number iterator } {
 return this
 }
 function . {value } @ {number } {
 return null
 }
 constructor . {new } {
 super . {new }
 }
 }
 class @ { number range iterator } extends @ {number iterator } {
 var . { current } @ {number }
 var . { end } @ {number }
 var . { start } @ {number }
 function . {at end } @ {boolean } {
 return . {current } > . {end }
 }
 function . {next } @ {number } {
 . {current } := . {current } + 1
 return this
 }
 function . {value } @ {number } {
 return . {current }
 }
 constructor . {from: . { from } @ {number }to: . { to } @ {number } } {
 super . {new }
 . {start } := . {from }
 . {end } := . {to }
 . {current } := . {start }
 }
 }
 class @ { object } {
 function . {!=: . { val } @ {object } } @ {boolean } {
 return ( this = . {val } ) . {not }
 }
 function . {=: . { val } @ {object } } @ {boolean } {
 primitive
 }
 function . {to string } @ {string } {
 primitive
 }
 constructor . {new } {
 primitive
 }
 }
 class @ { string } extends @ {object } {
 function . {+: . { val } @ {string } } @ {boolean } {
 primitive
 }
 function . {=: . { val } @ {object } } @ {boolean } {
 primitive
 }
 function . {substring from: . { from } @ {number }to: . { to } @ {number } } @ {string } {
 primitive
 }
 function . {to string } @ {string } {
 return this
 }
 }
 }