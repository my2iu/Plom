package org.programmingbasics.plom.core.ast.gen;

import java.util.Arrays;
import java.util.List;

public class Rule
{
	public final static List<Symbol> FullStatement_StatementOrEmpty_EndStatement = Arrays.asList(Symbol.FullStatement, Symbol.StatementOrEmpty, Symbol.EndStatement);
	public final static List<Symbol> StatementOrEmpty_Statement = Arrays.asList(Symbol.StatementOrEmpty, Symbol.Statement);
	public final static List<Symbol> StatementOrEmpty = Arrays.asList(Symbol.StatementOrEmpty);
	public final static List<Symbol> Statement_AssignmentExpression = Arrays.asList(Symbol.Statement, Symbol.AssignmentExpression);
	public final static List<Symbol> Statement_VarStatement = Arrays.asList(Symbol.Statement, Symbol.VarStatement);
	public final static List<Symbol> Statement_ReturnStatement = Arrays.asList(Symbol.Statement, Symbol.ReturnStatement);
	public final static List<Symbol> Statement_PrimitivePassthrough = Arrays.asList(Symbol.Statement, Symbol.PrimitivePassthrough);
	public final static List<Symbol> Statement_WideStatement_StatementOrEmpty = Arrays.asList(Symbol.Statement, Symbol.WideStatement, Symbol.StatementOrEmpty);
	public final static List<Symbol> WideStatement_COMPOUND_IF_AfterIf = Arrays.asList(Symbol.WideStatement, Symbol.COMPOUND_IF, Symbol.AfterIf);
	public final static List<Symbol> WideStatement_COMPOUND_WHILE = Arrays.asList(Symbol.WideStatement, Symbol.COMPOUND_WHILE);
	public final static List<Symbol> WideStatement_COMPOUND_FOR = Arrays.asList(Symbol.WideStatement, Symbol.COMPOUND_FOR);
	public final static List<Symbol> WideStatement_DUMMY_COMMENT = Arrays.asList(Symbol.WideStatement, Symbol.DUMMY_COMMENT);
	public final static List<Symbol> ExpressionOnly_Expression_EndStatement = Arrays.asList(Symbol.ExpressionOnly, Symbol.Expression, Symbol.EndStatement);
	public final static List<Symbol> AssignmentExpression_Expression_AssignmentExpressionMore = Arrays.asList(Symbol.AssignmentExpression, Symbol.Expression, Symbol.AssignmentExpressionMore);
	public final static List<Symbol> AssignmentExpressionMore_Assignment_Expression = Arrays.asList(Symbol.AssignmentExpressionMore, Symbol.Assignment, Symbol.Expression);
	public final static List<Symbol> AssignmentExpressionMore = Arrays.asList(Symbol.AssignmentExpressionMore);
	public final static List<Symbol> Expression_OrExpression = Arrays.asList(Symbol.Expression, Symbol.OrExpression);
	public final static List<Symbol> OrExpression_AndExpression_OrExpressionMore = Arrays.asList(Symbol.OrExpression, Symbol.AndExpression, Symbol.OrExpressionMore);
	public final static List<Symbol> OrExpressionMore_Or_AndExpression_OrExpressionMore = Arrays.asList(Symbol.OrExpressionMore, Symbol.Or, Symbol.AndExpression, Symbol.OrExpressionMore);
	public final static List<Symbol> OrExpressionMore = Arrays.asList(Symbol.OrExpressionMore);
	public final static List<Symbol> AndExpression_RelationalExpression_AndExpressionMore = Arrays.asList(Symbol.AndExpression, Symbol.RelationalExpression, Symbol.AndExpressionMore);
	public final static List<Symbol> AndExpressionMore_And_RelationalExpression_AndExpressionMore = Arrays.asList(Symbol.AndExpressionMore, Symbol.And, Symbol.RelationalExpression, Symbol.AndExpressionMore);
	public final static List<Symbol> AndExpressionMore = Arrays.asList(Symbol.AndExpressionMore);
	public final static List<Symbol> RelationalExpression_AdditiveExpression_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpression, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore_Retype_AtType_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore, Symbol.Retype, Symbol.AtType, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore_Gt_AdditiveExpression_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore, Symbol.Gt, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore_Ge_AdditiveExpression_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore, Symbol.Ge, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore_Lt_AdditiveExpression_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore, Symbol.Lt, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore_Le_AdditiveExpression_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore, Symbol.Le, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore_Eq_AdditiveExpression_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore, Symbol.Eq, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore_Ne_AdditiveExpression_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore, Symbol.Ne, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore_Is_AtType_RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore, Symbol.Is, Symbol.AtType, Symbol.RelationalExpressionMore);
	public final static List<Symbol> RelationalExpressionMore = Arrays.asList(Symbol.RelationalExpressionMore);
	public final static List<Symbol> AdditiveExpression_MultiplicativeExpression_AdditiveExpressionMore = Arrays.asList(Symbol.AdditiveExpression, Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore);
	public final static List<Symbol> AdditiveExpressionMore_Plus_MultiplicativeExpression_AdditiveExpressionMore = Arrays.asList(Symbol.AdditiveExpressionMore, Symbol.Plus, Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore);
	public final static List<Symbol> AdditiveExpressionMore_Minus_MultiplicativeExpression_AdditiveExpressionMore = Arrays.asList(Symbol.AdditiveExpressionMore, Symbol.Minus, Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore);
	public final static List<Symbol> AdditiveExpressionMore = Arrays.asList(Symbol.AdditiveExpressionMore);
	public final static List<Symbol> MultiplicativeExpression_MemberExpression_MultiplicativeExpressionMore = Arrays.asList(Symbol.MultiplicativeExpression, Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore);
	public final static List<Symbol> MultiplicativeExpressionMore_Multiply_MemberExpression_MultiplicativeExpressionMore = Arrays.asList(Symbol.MultiplicativeExpressionMore, Symbol.Multiply, Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore);
	public final static List<Symbol> MultiplicativeExpressionMore_Divide_MemberExpression_MultiplicativeExpressionMore = Arrays.asList(Symbol.MultiplicativeExpressionMore, Symbol.Divide, Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore);
	public final static List<Symbol> MultiplicativeExpressionMore = Arrays.asList(Symbol.MultiplicativeExpressionMore);
	public final static List<Symbol> MemberExpression_ParenthesisExpression_MemberExpressionMore = Arrays.asList(Symbol.MemberExpression, Symbol.ParenthesisExpression, Symbol.MemberExpressionMore);
	public final static List<Symbol> MemberExpressionMore_DotMember_MemberExpressionMore = Arrays.asList(Symbol.MemberExpressionMore, Symbol.DotMember, Symbol.MemberExpressionMore);
	public final static List<Symbol> MemberExpressionMore_As_AtType_MemberExpressionMore = Arrays.asList(Symbol.MemberExpressionMore, Symbol.As, Symbol.AtType, Symbol.MemberExpressionMore);
	public final static List<Symbol> MemberExpressionMore = Arrays.asList(Symbol.MemberExpressionMore);
	public final static List<Symbol> ParenthesisExpression_OpenParenthesis_Expression_ClosedParenthesis = Arrays.asList(Symbol.ParenthesisExpression, Symbol.OpenParenthesis, Symbol.Expression, Symbol.ClosedParenthesis);
	public final static List<Symbol> ParenthesisExpression_ValueExpression = Arrays.asList(Symbol.ParenthesisExpression, Symbol.ValueExpression);
	public final static List<Symbol> ValueExpression_This = Arrays.asList(Symbol.ValueExpression, Symbol.This);
	public final static List<Symbol> ValueExpression_SuperCallExpression = Arrays.asList(Symbol.ValueExpression, Symbol.SuperCallExpression);
	public final static List<Symbol> ValueExpression_NullLiteral = Arrays.asList(Symbol.ValueExpression, Symbol.NullLiteral);
	public final static List<Symbol> ValueExpression_TrueLiteral = Arrays.asList(Symbol.ValueExpression, Symbol.TrueLiteral);
	public final static List<Symbol> ValueExpression_FalseLiteral = Arrays.asList(Symbol.ValueExpression, Symbol.FalseLiteral);
	public final static List<Symbol> ValueExpression_Number = Arrays.asList(Symbol.ValueExpression, Symbol.Number);
	public final static List<Symbol> ValueExpression_StaticMethodCallExpression = Arrays.asList(Symbol.ValueExpression, Symbol.StaticMethodCallExpression);
	public final static List<Symbol> ValueExpression_DotVariable = Arrays.asList(Symbol.ValueExpression, Symbol.DotVariable);
	public final static List<Symbol> ValueExpression_String = Arrays.asList(Symbol.ValueExpression, Symbol.String);
	public final static List<Symbol> StaticMethodCallExpression_AtType_DotMember = Arrays.asList(Symbol.StaticMethodCallExpression, Symbol.AtType, Symbol.DotMember);
	public final static List<Symbol> SuperCallExpression_Super_DotSuperMember = Arrays.asList(Symbol.SuperCallExpression, Symbol.Super, Symbol.DotSuperMember);
	public final static List<Symbol> AfterIf_COMPOUND_ELSEIF_AfterIf = Arrays.asList(Symbol.AfterIf, Symbol.COMPOUND_ELSEIF, Symbol.AfterIf);
	public final static List<Symbol> AfterIf_COMPOUND_ELSE = Arrays.asList(Symbol.AfterIf, Symbol.COMPOUND_ELSE);
	public final static List<Symbol> AfterIf = Arrays.asList(Symbol.AfterIf);
	public final static List<Symbol> VarStatement_Var_DotDeclareIdentifier_VarType_VarAssignment = Arrays.asList(Symbol.VarStatement, Symbol.Var, Symbol.DotDeclareIdentifier, Symbol.VarType, Symbol.VarAssignment);
	public final static List<Symbol> VarType_AtType = Arrays.asList(Symbol.VarType, Symbol.AtType);
	public final static List<Symbol> VarType = Arrays.asList(Symbol.VarType);
	public final static List<Symbol> DotDeclareIdentifier_DotVariable = Arrays.asList(Symbol.DotDeclareIdentifier, Symbol.DotVariable);
	public final static List<Symbol> DotMember_DotVariable = Arrays.asList(Symbol.DotMember, Symbol.DotVariable);
	public final static List<Symbol> DotSuperMember_DotVariable = Arrays.asList(Symbol.DotSuperMember, Symbol.DotVariable);
	public final static List<Symbol> VarAssignment_Assignment_Expression = Arrays.asList(Symbol.VarAssignment, Symbol.Assignment, Symbol.Expression);
	public final static List<Symbol> VarAssignment = Arrays.asList(Symbol.VarAssignment);
	public final static List<Symbol> ReturnStatement_Return_Expression = Arrays.asList(Symbol.ReturnStatement, Symbol.Return, Symbol.Expression);
	public final static List<Symbol> ForExpression_DotDeclareIdentifier_VarType_In_Expression = Arrays.asList(Symbol.ForExpression, Symbol.DotDeclareIdentifier, Symbol.VarType, Symbol.In, Symbol.Expression);
	public final static List<Symbol> ForExpressionOnly_ForExpression_EndStatement = Arrays.asList(Symbol.ForExpressionOnly, Symbol.ForExpression, Symbol.EndStatement);
	public final static List<Symbol> FullVariableDeclaration_VariableDeclarationOrEmpty_EndStatement = Arrays.asList(Symbol.FullVariableDeclaration, Symbol.VariableDeclarationOrEmpty, Symbol.EndStatement);
	public final static List<Symbol> VariableDeclarationOrEmpty_VariableDeclaration = Arrays.asList(Symbol.VariableDeclarationOrEmpty, Symbol.VariableDeclaration);
	public final static List<Symbol> VariableDeclarationOrEmpty = Arrays.asList(Symbol.VariableDeclarationOrEmpty);
	public final static List<Symbol> VariableDeclaration_VarDeclarationStatement = Arrays.asList(Symbol.VariableDeclaration, Symbol.VarDeclarationStatement);
	public final static List<Symbol> VariableDeclaration_DUMMY_COMMENT_VariableDeclarationOrEmpty = Arrays.asList(Symbol.VariableDeclaration, Symbol.DUMMY_COMMENT, Symbol.VariableDeclarationOrEmpty);
	public final static List<Symbol> VarDeclarationStatement_Var_DotDeclareIdentifier_VarType = Arrays.asList(Symbol.VarDeclarationStatement, Symbol.Var, Symbol.DotDeclareIdentifier, Symbol.VarType);
	public final static List<Symbol> EMPTY = Arrays.asList(Symbol.EMPTY);
	public final static List<Symbol> EndStatement = Arrays.asList(Symbol.EndStatement);
	public final static List<Symbol> This = Arrays.asList(Symbol.This);
	public final static List<Symbol> Super = Arrays.asList(Symbol.Super);
	public final static List<Symbol> NullLiteral = Arrays.asList(Symbol.NullLiteral);
	public final static List<Symbol> TrueLiteral = Arrays.asList(Symbol.TrueLiteral);
	public final static List<Symbol> FalseLiteral = Arrays.asList(Symbol.FalseLiteral);
	public final static List<Symbol> String = Arrays.asList(Symbol.String);
	public final static List<Symbol> Number = Arrays.asList(Symbol.Number);
	public final static List<Symbol> DotVariable = Arrays.asList(Symbol.DotVariable);
	public final static List<Symbol> AtType = Arrays.asList(Symbol.AtType);
	public final static List<Symbol> Var = Arrays.asList(Symbol.Var);
	public final static List<Symbol> Assignment = Arrays.asList(Symbol.Assignment);
	public final static List<Symbol> Retype = Arrays.asList(Symbol.Retype);
	public final static List<Symbol> As = Arrays.asList(Symbol.As);
	public final static List<Symbol> Is = Arrays.asList(Symbol.Is);
	public final static List<Symbol> Lt = Arrays.asList(Symbol.Lt);
	public final static List<Symbol> Gt = Arrays.asList(Symbol.Gt);
	public final static List<Symbol> Le = Arrays.asList(Symbol.Le);
	public final static List<Symbol> Ge = Arrays.asList(Symbol.Ge);
	public final static List<Symbol> Eq = Arrays.asList(Symbol.Eq);
	public final static List<Symbol> Ne = Arrays.asList(Symbol.Ne);
	public final static List<Symbol> Or = Arrays.asList(Symbol.Or);
	public final static List<Symbol> And = Arrays.asList(Symbol.And);
	public final static List<Symbol> Plus = Arrays.asList(Symbol.Plus);
	public final static List<Symbol> Minus = Arrays.asList(Symbol.Minus);
	public final static List<Symbol> Multiply = Arrays.asList(Symbol.Multiply);
	public final static List<Symbol> Divide = Arrays.asList(Symbol.Divide);
	public final static List<Symbol> OpenParenthesis = Arrays.asList(Symbol.OpenParenthesis);
	public final static List<Symbol> ClosedParenthesis = Arrays.asList(Symbol.ClosedParenthesis);
	public final static List<Symbol> Return = Arrays.asList(Symbol.Return);
	public final static List<Symbol> PrimitivePassthrough = Arrays.asList(Symbol.PrimitivePassthrough);
	public final static List<Symbol> In = Arrays.asList(Symbol.In);
	public final static List<Symbol> DUMMY_COMMENT = Arrays.asList(Symbol.DUMMY_COMMENT);
	public final static List<Symbol> COMPOUND_IF = Arrays.asList(Symbol.COMPOUND_IF);
	public final static List<Symbol> COMPOUND_ELSE = Arrays.asList(Symbol.COMPOUND_ELSE);
	public final static List<Symbol> COMPOUND_ELSEIF = Arrays.asList(Symbol.COMPOUND_ELSEIF);
	public final static List<Symbol> COMPOUND_WHILE = Arrays.asList(Symbol.COMPOUND_WHILE);
	public final static List<Symbol> COMPOUND_FOR = Arrays.asList(Symbol.COMPOUND_FOR);
	public final static List<Symbol> DUMMY_BEGIN = Arrays.asList(Symbol.DUMMY_BEGIN);
	public final static List<Symbol> DUMMY_END = Arrays.asList(Symbol.DUMMY_END);
	public final static List<Symbol> ASSEMBLED_STATEMENTS_BLOCK = Arrays.asList(Symbol.ASSEMBLED_STATEMENTS_BLOCK);
}
