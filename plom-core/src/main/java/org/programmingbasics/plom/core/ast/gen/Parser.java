package org.programmingbasics.plom.core.ast.gen;

import java.util.Map;
import java.util.HashMap;

public class Parser
{
	public Map<Symbol, Map<Symbol, Symbol[]>> parsingTable = new HashMap<>();
	{
		parsingTable.put(Symbol.AdditiveExpression, new HashMap<>());
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.AtType, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.Number, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.String, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.This, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.put(Symbol.AdditiveExpressionMore, new HashMap<>());
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.And, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Assignment, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.ClosedParenthesis, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Eq, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Ge, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Gt, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Is, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Le, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Lt, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Minus, new Symbol[] {Symbol.Minus, Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Ne, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Or, new Symbol[] {});
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Plus, new Symbol[] {Symbol.Plus, Symbol.MultiplicativeExpression, Symbol.AdditiveExpressionMore, });
		parsingTable.get(Symbol.AdditiveExpressionMore).put(Symbol.Retype, new Symbol[] {});
		parsingTable.put(Symbol.AfterIf, new HashMap<>());
		parsingTable.get(Symbol.AfterIf).put(Symbol.AtType, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.COMPOUND_ELSE, new Symbol[] {Symbol.COMPOUND_ELSE, });
		parsingTable.get(Symbol.AfterIf).put(Symbol.COMPOUND_ELSEIF, new Symbol[] {Symbol.COMPOUND_ELSEIF, Symbol.AfterIf, });
		parsingTable.get(Symbol.AfterIf).put(Symbol.COMPOUND_FOR, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.COMPOUND_IF, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.COMPOUND_WHILE, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.DUMMY_COMMENT, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.DotVariable, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.FalseLiteral, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.NullLiteral, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.Number, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.OpenParenthesis, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.PrimitivePassthrough, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.Return, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.String, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.This, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.TrueLiteral, new Symbol[] {});
		parsingTable.get(Symbol.AfterIf).put(Symbol.Var, new Symbol[] {});
		parsingTable.put(Symbol.AndExpression, new HashMap<>());
		parsingTable.get(Symbol.AndExpression).put(Symbol.AtType, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpression).put(Symbol.Number, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpression).put(Symbol.String, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpression).put(Symbol.This, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.put(Symbol.AndExpressionMore, new HashMap<>());
		parsingTable.get(Symbol.AndExpressionMore).put(Symbol.And, new Symbol[] {Symbol.And, Symbol.RelationalExpression, Symbol.AndExpressionMore, });
		parsingTable.get(Symbol.AndExpressionMore).put(Symbol.Assignment, new Symbol[] {});
		parsingTable.get(Symbol.AndExpressionMore).put(Symbol.ClosedParenthesis, new Symbol[] {});
		parsingTable.get(Symbol.AndExpressionMore).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.AndExpressionMore).put(Symbol.Or, new Symbol[] {});
		parsingTable.put(Symbol.AssignmentExpression, new HashMap<>());
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.AtType, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.Number, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.String, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.This, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.get(Symbol.AssignmentExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.Expression, Symbol.AssignmentExpressionMore, });
		parsingTable.put(Symbol.AssignmentExpressionMore, new HashMap<>());
		parsingTable.get(Symbol.AssignmentExpressionMore).put(Symbol.Assignment, new Symbol[] {Symbol.Assignment, Symbol.Expression, });
		parsingTable.get(Symbol.AssignmentExpressionMore).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.put(Symbol.DotDeclareIdentifier, new HashMap<>());
		parsingTable.get(Symbol.DotDeclareIdentifier).put(Symbol.DotVariable, new Symbol[] {Symbol.DotVariable, });
		parsingTable.put(Symbol.DotMember, new HashMap<>());
		parsingTable.get(Symbol.DotMember).put(Symbol.DotVariable, new Symbol[] {Symbol.DotVariable, });
		parsingTable.put(Symbol.Expression, new HashMap<>());
		parsingTable.get(Symbol.Expression).put(Symbol.AtType, new Symbol[] {Symbol.OrExpression, });
		parsingTable.get(Symbol.Expression).put(Symbol.DotVariable, new Symbol[] {Symbol.OrExpression, });
		parsingTable.get(Symbol.Expression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.OrExpression, });
		parsingTable.get(Symbol.Expression).put(Symbol.NullLiteral, new Symbol[] {Symbol.OrExpression, });
		parsingTable.get(Symbol.Expression).put(Symbol.Number, new Symbol[] {Symbol.OrExpression, });
		parsingTable.get(Symbol.Expression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.OrExpression, });
		parsingTable.get(Symbol.Expression).put(Symbol.String, new Symbol[] {Symbol.OrExpression, });
		parsingTable.get(Symbol.Expression).put(Symbol.This, new Symbol[] {Symbol.OrExpression, });
		parsingTable.get(Symbol.Expression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.OrExpression, });
		parsingTable.put(Symbol.ExpressionOnly, new HashMap<>());
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.AtType, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.DotVariable, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.FalseLiteral, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.NullLiteral, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.Number, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.String, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.This, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.get(Symbol.ExpressionOnly).put(Symbol.TrueLiteral, new Symbol[] {Symbol.Expression, Symbol.EndStatement, });
		parsingTable.put(Symbol.ForExpression, new HashMap<>());
		parsingTable.get(Symbol.ForExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.DotDeclareIdentifier, Symbol.VarType, Symbol.In, Symbol.Expression, });
		parsingTable.put(Symbol.ForExpressionOnly, new HashMap<>());
		parsingTable.get(Symbol.ForExpressionOnly).put(Symbol.DotVariable, new Symbol[] {Symbol.ForExpression, Symbol.EndStatement, });
		parsingTable.put(Symbol.FullStatement, new HashMap<>());
		parsingTable.get(Symbol.FullStatement).put(Symbol.AtType, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.COMPOUND_FOR, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.COMPOUND_IF, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.COMPOUND_WHILE, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.DUMMY_COMMENT, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.DotVariable, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.EndStatement, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.FalseLiteral, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.NullLiteral, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.Number, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.PrimitivePassthrough, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.Return, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.String, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.This, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.TrueLiteral, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.get(Symbol.FullStatement).put(Symbol.Var, new Symbol[] {Symbol.StatementOrEmpty, Symbol.EndStatement, });
		parsingTable.put(Symbol.MemberExpression, new HashMap<>());
		parsingTable.get(Symbol.MemberExpression).put(Symbol.AtType, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpression).put(Symbol.Number, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpression).put(Symbol.String, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpression).put(Symbol.This, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.ParenthesisExpression, Symbol.MemberExpressionMore, });
		parsingTable.put(Symbol.MemberExpressionMore, new HashMap<>());
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.And, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.As, new Symbol[] {Symbol.As, Symbol.AtType, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Assignment, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.ClosedParenthesis, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Divide, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.DotVariable, new Symbol[] {Symbol.DotMember, Symbol.MemberExpressionMore, });
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Eq, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Ge, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Gt, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Is, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Le, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Lt, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Minus, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Multiply, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Ne, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Or, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Plus, new Symbol[] {});
		parsingTable.get(Symbol.MemberExpressionMore).put(Symbol.Retype, new Symbol[] {});
		parsingTable.put(Symbol.MultiplicativeExpression, new HashMap<>());
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.AtType, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.Number, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.String, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.This, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.put(Symbol.MultiplicativeExpressionMore, new HashMap<>());
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.And, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Assignment, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.ClosedParenthesis, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Divide, new Symbol[] {Symbol.Divide, Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Eq, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Ge, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Gt, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Is, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Le, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Lt, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Minus, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Multiply, new Symbol[] {Symbol.Multiply, Symbol.MemberExpression, Symbol.MultiplicativeExpressionMore, });
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Ne, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Or, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Plus, new Symbol[] {});
		parsingTable.get(Symbol.MultiplicativeExpressionMore).put(Symbol.Retype, new Symbol[] {});
		parsingTable.put(Symbol.OrExpression, new HashMap<>());
		parsingTable.get(Symbol.OrExpression).put(Symbol.AtType, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.get(Symbol.OrExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.get(Symbol.OrExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.get(Symbol.OrExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.get(Symbol.OrExpression).put(Symbol.Number, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.get(Symbol.OrExpression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.get(Symbol.OrExpression).put(Symbol.String, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.get(Symbol.OrExpression).put(Symbol.This, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.get(Symbol.OrExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.put(Symbol.OrExpressionMore, new HashMap<>());
		parsingTable.get(Symbol.OrExpressionMore).put(Symbol.Assignment, new Symbol[] {});
		parsingTable.get(Symbol.OrExpressionMore).put(Symbol.ClosedParenthesis, new Symbol[] {});
		parsingTable.get(Symbol.OrExpressionMore).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.OrExpressionMore).put(Symbol.Or, new Symbol[] {Symbol.Or, Symbol.AndExpression, Symbol.OrExpressionMore, });
		parsingTable.put(Symbol.ParenthesisExpression, new HashMap<>());
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.AtType, new Symbol[] {Symbol.ValueExpression, });
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.ValueExpression, });
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.ValueExpression, });
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.ValueExpression, });
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.Number, new Symbol[] {Symbol.ValueExpression, });
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.OpenParenthesis, Symbol.Expression, Symbol.ClosedParenthesis, });
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.String, new Symbol[] {Symbol.ValueExpression, });
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.This, new Symbol[] {Symbol.ValueExpression, });
		parsingTable.get(Symbol.ParenthesisExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.ValueExpression, });
		parsingTable.put(Symbol.RelationalExpression, new HashMap<>());
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.AtType, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.Number, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.String, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.This, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.put(Symbol.RelationalExpressionMore, new HashMap<>());
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.And, new Symbol[] {});
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Assignment, new Symbol[] {});
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.ClosedParenthesis, new Symbol[] {});
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Eq, new Symbol[] {Symbol.Eq, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Ge, new Symbol[] {Symbol.Ge, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Gt, new Symbol[] {Symbol.Gt, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Is, new Symbol[] {Symbol.Is, Symbol.AtType, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Le, new Symbol[] {Symbol.Le, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Lt, new Symbol[] {Symbol.Lt, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Ne, new Symbol[] {Symbol.Ne, Symbol.AdditiveExpression, Symbol.RelationalExpressionMore, });
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Or, new Symbol[] {});
		parsingTable.get(Symbol.RelationalExpressionMore).put(Symbol.Retype, new Symbol[] {Symbol.Retype, Symbol.AtType, Symbol.RelationalExpressionMore, });
		parsingTable.put(Symbol.ReturnStatement, new HashMap<>());
		parsingTable.get(Symbol.ReturnStatement).put(Symbol.Return, new Symbol[] {Symbol.Return, Symbol.Expression, });
		parsingTable.put(Symbol.Statement, new HashMap<>());
		parsingTable.get(Symbol.Statement).put(Symbol.AtType, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.COMPOUND_FOR, new Symbol[] {Symbol.WideStatement, Symbol.StatementOrEmpty, });
		parsingTable.get(Symbol.Statement).put(Symbol.COMPOUND_IF, new Symbol[] {Symbol.WideStatement, Symbol.StatementOrEmpty, });
		parsingTable.get(Symbol.Statement).put(Symbol.COMPOUND_WHILE, new Symbol[] {Symbol.WideStatement, Symbol.StatementOrEmpty, });
		parsingTable.get(Symbol.Statement).put(Symbol.DUMMY_COMMENT, new Symbol[] {Symbol.WideStatement, Symbol.StatementOrEmpty, });
		parsingTable.get(Symbol.Statement).put(Symbol.DotVariable, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.FalseLiteral, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.NullLiteral, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.Number, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.PrimitivePassthrough, new Symbol[] {Symbol.PrimitivePassthrough, });
		parsingTable.get(Symbol.Statement).put(Symbol.Return, new Symbol[] {Symbol.ReturnStatement, });
		parsingTable.get(Symbol.Statement).put(Symbol.String, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.This, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.TrueLiteral, new Symbol[] {Symbol.AssignmentExpression, });
		parsingTable.get(Symbol.Statement).put(Symbol.Var, new Symbol[] {Symbol.VarStatement, });
		parsingTable.put(Symbol.StatementOrEmpty, new HashMap<>());
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.AtType, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.COMPOUND_FOR, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.COMPOUND_IF, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.COMPOUND_WHILE, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.DUMMY_COMMENT, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.DotVariable, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.FalseLiteral, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.NullLiteral, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.Number, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.OpenParenthesis, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.PrimitivePassthrough, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.Return, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.String, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.This, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.TrueLiteral, new Symbol[] {Symbol.Statement, });
		parsingTable.get(Symbol.StatementOrEmpty).put(Symbol.Var, new Symbol[] {Symbol.Statement, });
		parsingTable.put(Symbol.StaticMethodCallExpression, new HashMap<>());
		parsingTable.get(Symbol.StaticMethodCallExpression).put(Symbol.AtType, new Symbol[] {Symbol.AtType, Symbol.DotMember, });
		parsingTable.put(Symbol.ValueExpression, new HashMap<>());
		parsingTable.get(Symbol.ValueExpression).put(Symbol.AtType, new Symbol[] {Symbol.StaticMethodCallExpression, });
		parsingTable.get(Symbol.ValueExpression).put(Symbol.DotVariable, new Symbol[] {Symbol.DotVariable, });
		parsingTable.get(Symbol.ValueExpression).put(Symbol.FalseLiteral, new Symbol[] {Symbol.FalseLiteral, });
		parsingTable.get(Symbol.ValueExpression).put(Symbol.NullLiteral, new Symbol[] {Symbol.NullLiteral, });
		parsingTable.get(Symbol.ValueExpression).put(Symbol.Number, new Symbol[] {Symbol.Number, });
		parsingTable.get(Symbol.ValueExpression).put(Symbol.String, new Symbol[] {Symbol.String, });
		parsingTable.get(Symbol.ValueExpression).put(Symbol.This, new Symbol[] {Symbol.This, });
		parsingTable.get(Symbol.ValueExpression).put(Symbol.TrueLiteral, new Symbol[] {Symbol.TrueLiteral, });
		parsingTable.put(Symbol.VarAssignment, new HashMap<>());
		parsingTable.get(Symbol.VarAssignment).put(Symbol.Assignment, new Symbol[] {Symbol.Assignment, Symbol.Expression, });
		parsingTable.get(Symbol.VarAssignment).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.put(Symbol.VarStatement, new HashMap<>());
		parsingTable.get(Symbol.VarStatement).put(Symbol.Var, new Symbol[] {Symbol.Var, Symbol.DotDeclareIdentifier, Symbol.VarType, Symbol.VarAssignment, });
		parsingTable.put(Symbol.VarType, new HashMap<>());
		parsingTable.get(Symbol.VarType).put(Symbol.Assignment, new Symbol[] {});
		parsingTable.get(Symbol.VarType).put(Symbol.AtType, new Symbol[] {Symbol.AtType, });
		parsingTable.get(Symbol.VarType).put(Symbol.EndStatement, new Symbol[] {});
		parsingTable.get(Symbol.VarType).put(Symbol.In, new Symbol[] {});
		parsingTable.put(Symbol.WideStatement, new HashMap<>());
		parsingTable.get(Symbol.WideStatement).put(Symbol.COMPOUND_FOR, new Symbol[] {Symbol.COMPOUND_FOR, });
		parsingTable.get(Symbol.WideStatement).put(Symbol.COMPOUND_IF, new Symbol[] {Symbol.COMPOUND_IF, Symbol.AfterIf, });
		parsingTable.get(Symbol.WideStatement).put(Symbol.COMPOUND_WHILE, new Symbol[] {Symbol.COMPOUND_WHILE, });
		parsingTable.get(Symbol.WideStatement).put(Symbol.DUMMY_COMMENT, new Symbol[] {Symbol.DUMMY_COMMENT, });
	}
}
